# application.yml
--- 
spring: 
  application: 
    name: orderservice

  datasource:
    url: jdbc:postgresql://localhost:5433/orderservice
    username: postgres
    password: postgres
  jpa:
    database: POSTGRESQL
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update

  # CONSUL 
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 45s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false 

server: 
  port: ${PORT:${SERVER_PORT:0}} # utilizzo di una porta casuale ad ogni avvio del servizio, locazione non nota a priori

  # per swagger dietro un api gateway 
  forward-headers-strategy: framework
  
# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false

